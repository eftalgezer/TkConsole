# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11", "3.12-dev"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    - name: Install dependencies (all)
      run: |
        pip install setuptools --upgrade
        pip install --upgrade pip
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
    - name: Install dependencies (Ubuntu)
      if: "startsWith(matrix.os, 'ubuntu')"
      run: |
        sudo apt-get update
        sudo apt-get install python3-tk
        sudo apt-get install -y xvfb
    - name: Install dependencies (macOS, except with Python 3.11 and 3.12)
      if: "startsWith(matrix.os, 'macos') && !(matrix.python-version == '3.11') && !(matrix.python-version == '3.12-dev')"
      run: |
           brew update
           brew install tcl-tk
           echo 'export PATH="/usr/local/opt/tcl-tk/bin:$PATH"' >> ~/.zshrc
           export LDFLAGS="-L/usr/local/opt/tcl-tk/lib"
           export CPPFLAGS="-I/usr/local/opt/tcl-tk/include"
           export PKG_CONFIG_PATH="/usr/local/opt/tcl-tk/lib/pkgconfig"
           brew install pyenv --head
           python --version >> py_ver
           sed -i '' "s/Python //g" py_ver
           export PY_VER="$( cat py_ver )"
           env \
           PATH="$(brew --prefix tcl-tk)/bin:$PATH" \
           LDFLAGS="-L$(brew --prefix tcl-tk)/lib" \
           CPPFLAGS="-I$(brew --prefix tcl-tk)/include" \
           PKG_CONFIG_PATH="$(brew --prefix tcl-tk)/lib/pkgconfig" \
           CFLAGS="-I$(brew --prefix tcl-tk)/include" \
           PYTHON_CONFIGURE_OPTS="--with-tcltk-includes='-I$(brew --prefix tcl-tk)/include' --with-tcltk-libs='-L$(brew --prefix tcl-tk)/lib -ltcl8.6 -ltk8.6'" \
           pyenv install $PY_VER
           pyenv global $PY_VER
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest
    - name: See requirements
      run: |
            pip freeze
    - name: Generate Report
      run: |
        pip install codecov
        pip install pytest-cov
        pytest --cov=./ --cov-report=xml
        codecov
    - name: See coverage
      run: |
          ls
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3.1.4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        env_vars: OS,PYTHON
        files: ./coverage.xml
        flags: tests
    - name: Pushing reports to Codacy (Windows)
      if: "startsWith(matrix.os, 'windows')"
      run: |
            git clone https://github.com/codacy/codacy-coverage-reporter.git
            cd codacy-coverage-reporter
            sbt assembly
            $jar = Convert-Path ../codacy-coverage-reporter/target/codacy-coverage-reporter-assembly-*.jar
            java -jar $jar report -r ../coverage.xml --project-token ${{secrets.CODACY_TOKEN}}
    - name: Pushing reports to Codacy (others)
      if: "!startsWith(matrix.os, 'windows')"
      run: |
            export CODACY_PROJECT_TOKEN=${{secrets.CODACY_TOKEN}}
            LATEST_VERSION="$(curl -Ls https://artifacts.codacy.com/bin/codacy-coverage-reporter/latest)"
            curl -Ls -o codacy-coverage-reporter-assembly.jar "https://artifacts.codacy.com/bin/codacy-coverage-reporter/${LATEST_VERSION}/codacy-coverage-reporter-assembly.jar"
            java -jar codacy-coverage-reporter-assembly.jar report -r coverage.xml

